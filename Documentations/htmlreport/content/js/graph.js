/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1103.0, "minX": 0.0, "maxY": 185389.0, "series": [{"data": [[0.0, 82131.0], [0.1, 82131.0], [0.2, 82131.0], [0.3, 82131.0], [0.4, 82131.0], [0.5, 82131.0], [0.6, 82131.0], [0.7, 82131.0], [0.8, 82131.0], [0.9, 82131.0], [1.0, 82214.0], [1.1, 82214.0], [1.2, 82214.0], [1.3, 82214.0], [1.4, 82214.0], [1.5, 82214.0], [1.6, 82214.0], [1.7, 82214.0], [1.8, 82214.0], [1.9, 82214.0], [2.0, 82217.0], [2.1, 82217.0], [2.2, 82217.0], [2.3, 82217.0], [2.4, 82217.0], [2.5, 82217.0], [2.6, 82217.0], [2.7, 82217.0], [2.8, 82217.0], [2.9, 82217.0], [3.0, 82408.0], [3.1, 82408.0], [3.2, 82408.0], [3.3, 82408.0], [3.4, 82408.0], [3.5, 82408.0], [3.6, 82408.0], [3.7, 82408.0], [3.8, 82408.0], [3.9, 82408.0], [4.0, 82411.0], [4.1, 82411.0], [4.2, 82411.0], [4.3, 82411.0], [4.4, 82411.0], [4.5, 82411.0], [4.6, 82411.0], [4.7, 82411.0], [4.8, 82411.0], [4.9, 82411.0], [5.0, 82474.0], [5.1, 82474.0], [5.2, 82474.0], [5.3, 82474.0], [5.4, 82474.0], [5.5, 82474.0], [5.6, 82474.0], [5.7, 82474.0], [5.8, 82474.0], [5.9, 82474.0], [6.0, 82479.0], [6.1, 82479.0], [6.2, 82479.0], [6.3, 82479.0], [6.4, 82479.0], [6.5, 82479.0], [6.6, 82479.0], [6.7, 82479.0], [6.8, 82479.0], [6.9, 82479.0], [7.0, 82486.0], [7.1, 82486.0], [7.2, 82486.0], [7.3, 82486.0], [7.4, 82486.0], [7.5, 82486.0], [7.6, 82486.0], [7.7, 82486.0], [7.8, 82486.0], [7.9, 82486.0], [8.0, 82521.0], [8.1, 82521.0], [8.2, 82521.0], [8.3, 82521.0], [8.4, 82521.0], [8.5, 82521.0], [8.6, 82521.0], [8.7, 82521.0], [8.8, 82521.0], [8.9, 82521.0], [9.0, 82573.0], [9.1, 82573.0], [9.2, 82573.0], [9.3, 82573.0], [9.4, 82573.0], [9.5, 82573.0], [9.6, 82573.0], [9.7, 82573.0], [9.8, 82573.0], [9.9, 82573.0], [10.0, 82581.0], [10.1, 82581.0], [10.2, 82581.0], [10.3, 82581.0], [10.4, 82581.0], [10.5, 82581.0], [10.6, 82581.0], [10.7, 82581.0], [10.8, 82581.0], [10.9, 82581.0], [11.0, 82610.0], [11.1, 82610.0], [11.2, 82610.0], [11.3, 82610.0], [11.4, 82610.0], [11.5, 82610.0], [11.6, 82610.0], [11.7, 82610.0], [11.8, 82610.0], [11.9, 82610.0], [12.0, 82640.0], [12.1, 82640.0], [12.2, 82640.0], [12.3, 82640.0], [12.4, 82640.0], [12.5, 82640.0], [12.6, 82640.0], [12.7, 82640.0], [12.8, 82640.0], [12.9, 82640.0], [13.0, 82808.0], [13.1, 82808.0], [13.2, 82808.0], [13.3, 82808.0], [13.4, 82808.0], [13.5, 82808.0], [13.6, 82808.0], [13.7, 82808.0], [13.8, 82808.0], [13.9, 82808.0], [14.0, 82815.0], [14.1, 82815.0], [14.2, 82815.0], [14.3, 82815.0], [14.4, 82815.0], [14.5, 82815.0], [14.6, 82815.0], [14.7, 82815.0], [14.8, 82815.0], [14.9, 82815.0], [15.0, 82871.0], [15.1, 82871.0], [15.2, 82871.0], [15.3, 82871.0], [15.4, 82871.0], [15.5, 82871.0], [15.6, 82871.0], [15.7, 82871.0], [15.8, 82871.0], [15.9, 82871.0], [16.0, 82872.0], [16.1, 82872.0], [16.2, 82872.0], [16.3, 82872.0], [16.4, 82872.0], [16.5, 82872.0], [16.6, 82872.0], [16.7, 82872.0], [16.8, 82872.0], [16.9, 82872.0], [17.0, 82875.0], [17.1, 82875.0], [17.2, 82875.0], [17.3, 82875.0], [17.4, 82875.0], [17.5, 82875.0], [17.6, 82875.0], [17.7, 82875.0], [17.8, 82875.0], [17.9, 82875.0], [18.0, 82876.0], [18.1, 82876.0], [18.2, 82876.0], [18.3, 82876.0], [18.4, 82876.0], [18.5, 82876.0], [18.6, 82876.0], [18.7, 82876.0], [18.8, 82876.0], [18.9, 82876.0], [19.0, 82885.0], [19.1, 82885.0], [19.2, 82885.0], [19.3, 82885.0], [19.4, 82885.0], [19.5, 82885.0], [19.6, 82885.0], [19.7, 82885.0], [19.8, 82885.0], [19.9, 82885.0], [20.0, 82896.0], [20.1, 82896.0], [20.2, 82896.0], [20.3, 82896.0], [20.4, 82896.0], [20.5, 82896.0], [20.6, 82896.0], [20.7, 82896.0], [20.8, 82896.0], [20.9, 82896.0], [21.0, 82897.0], [21.1, 82897.0], [21.2, 82897.0], [21.3, 82897.0], [21.4, 82897.0], [21.5, 82897.0], [21.6, 82897.0], [21.7, 82897.0], [21.8, 82897.0], [21.9, 82897.0], [22.0, 82900.0], [22.1, 82900.0], [22.2, 82900.0], [22.3, 82900.0], [22.4, 82900.0], [22.5, 82900.0], [22.6, 82900.0], [22.7, 82900.0], [22.8, 82900.0], [22.9, 82900.0], [23.0, 82906.0], [23.1, 82906.0], [23.2, 82906.0], [23.3, 82906.0], [23.4, 82906.0], [23.5, 82906.0], [23.6, 82906.0], [23.7, 82906.0], [23.8, 82906.0], [23.9, 82906.0], [24.0, 82910.0], [24.1, 82910.0], [24.2, 82910.0], [24.3, 82910.0], [24.4, 82910.0], [24.5, 82910.0], [24.6, 82910.0], [24.7, 82910.0], [24.8, 82910.0], [24.9, 82910.0], [25.0, 83039.0], [25.1, 83039.0], [25.2, 83039.0], [25.3, 83039.0], [25.4, 83039.0], [25.5, 83039.0], [25.6, 83039.0], [25.7, 83039.0], [25.8, 83039.0], [25.9, 83039.0], [26.0, 83184.0], [26.1, 83184.0], [26.2, 83184.0], [26.3, 83184.0], [26.4, 83184.0], [26.5, 83184.0], [26.6, 83184.0], [26.7, 83184.0], [26.8, 83184.0], [26.9, 83184.0], [27.0, 83285.0], [27.1, 83285.0], [27.2, 83285.0], [27.3, 83285.0], [27.4, 83285.0], [27.5, 83285.0], [27.6, 83285.0], [27.7, 83285.0], [27.8, 83285.0], [27.9, 83285.0], [28.0, 83311.0], [28.1, 83311.0], [28.2, 83311.0], [28.3, 83311.0], [28.4, 83311.0], [28.5, 83311.0], [28.6, 83311.0], [28.7, 83311.0], [28.8, 83311.0], [28.9, 83311.0], [29.0, 83454.0], [29.1, 83454.0], [29.2, 83454.0], [29.3, 83454.0], [29.4, 83454.0], [29.5, 83454.0], [29.6, 83454.0], [29.7, 83454.0], [29.8, 83454.0], [29.9, 83454.0], [30.0, 83581.0], [30.1, 83581.0], [30.2, 83581.0], [30.3, 83581.0], [30.4, 83581.0], [30.5, 83581.0], [30.6, 83581.0], [30.7, 83581.0], [30.8, 83581.0], [30.9, 83581.0], [31.0, 83582.0], [31.1, 83582.0], [31.2, 83582.0], [31.3, 83582.0], [31.4, 83582.0], [31.5, 83582.0], [31.6, 83582.0], [31.7, 83582.0], [31.8, 83582.0], [31.9, 83582.0], [32.0, 83582.0], [32.1, 83582.0], [32.2, 83582.0], [32.3, 83582.0], [32.4, 83582.0], [32.5, 83582.0], [32.6, 83582.0], [32.7, 83582.0], [32.8, 83582.0], [32.9, 83582.0], [33.0, 83601.0], [33.1, 83601.0], [33.2, 83601.0], [33.3, 83601.0], [33.4, 83601.0], [33.5, 83601.0], [33.6, 83601.0], [33.7, 83601.0], [33.8, 83601.0], [33.9, 83601.0], [34.0, 83681.0], [34.1, 83681.0], [34.2, 83681.0], [34.3, 83681.0], [34.4, 83681.0], [34.5, 83681.0], [34.6, 83681.0], [34.7, 83681.0], [34.8, 83681.0], [34.9, 83681.0], [35.0, 83693.0], [35.1, 83693.0], [35.2, 83693.0], [35.3, 83693.0], [35.4, 83693.0], [35.5, 83693.0], [35.6, 83693.0], [35.7, 83693.0], [35.8, 83693.0], [35.9, 83693.0], [36.0, 83695.0], [36.1, 83695.0], [36.2, 83695.0], [36.3, 83695.0], [36.4, 83695.0], [36.5, 83695.0], [36.6, 83695.0], [36.7, 83695.0], [36.8, 83695.0], [36.9, 83695.0], [37.0, 83701.0], [37.1, 83701.0], [37.2, 83701.0], [37.3, 83701.0], [37.4, 83701.0], [37.5, 83701.0], [37.6, 83701.0], [37.7, 83701.0], [37.8, 83701.0], [37.9, 83701.0], [38.0, 83708.0], [38.1, 83708.0], [38.2, 83708.0], [38.3, 83708.0], [38.4, 83708.0], [38.5, 83708.0], [38.6, 83708.0], [38.7, 83708.0], [38.8, 83708.0], [38.9, 83708.0], [39.0, 83714.0], [39.1, 83714.0], [39.2, 83714.0], [39.3, 83714.0], [39.4, 83714.0], [39.5, 83714.0], [39.6, 83714.0], [39.7, 83714.0], [39.8, 83714.0], [39.9, 83714.0], [40.0, 83761.0], [40.1, 83761.0], [40.2, 83761.0], [40.3, 83761.0], [40.4, 83761.0], [40.5, 83761.0], [40.6, 83761.0], [40.7, 83761.0], [40.8, 83761.0], [40.9, 83761.0], [41.0, 83788.0], [41.1, 83788.0], [41.2, 83788.0], [41.3, 83788.0], [41.4, 83788.0], [41.5, 83788.0], [41.6, 83788.0], [41.7, 83788.0], [41.8, 83788.0], [41.9, 83788.0], [42.0, 83800.0], [42.1, 83800.0], [42.2, 83800.0], [42.3, 83800.0], [42.4, 83800.0], [42.5, 83800.0], [42.6, 83800.0], [42.7, 83800.0], [42.8, 83800.0], [42.9, 83800.0], [43.0, 83811.0], [43.1, 83811.0], [43.2, 83811.0], [43.3, 83811.0], [43.4, 83811.0], [43.5, 83811.0], [43.6, 83811.0], [43.7, 83811.0], [43.8, 83811.0], [43.9, 83811.0], [44.0, 83893.0], [44.1, 83893.0], [44.2, 83893.0], [44.3, 83893.0], [44.4, 83893.0], [44.5, 83893.0], [44.6, 83893.0], [44.7, 83893.0], [44.8, 83893.0], [44.9, 83893.0], [45.0, 83980.0], [45.1, 83980.0], [45.2, 83980.0], [45.3, 83980.0], [45.4, 83980.0], [45.5, 83980.0], [45.6, 83980.0], [45.7, 83980.0], [45.8, 83980.0], [45.9, 83980.0], [46.0, 83990.0], [46.1, 83990.0], [46.2, 83990.0], [46.3, 83990.0], [46.4, 83990.0], [46.5, 83990.0], [46.6, 83990.0], [46.7, 83990.0], [46.8, 83990.0], [46.9, 83990.0], [47.0, 84136.0], [47.1, 84136.0], [47.2, 84136.0], [47.3, 84136.0], [47.4, 84136.0], [47.5, 84136.0], [47.6, 84136.0], [47.7, 84136.0], [47.8, 84136.0], [47.9, 84136.0], [48.0, 84177.0], [48.1, 84177.0], [48.2, 84177.0], [48.3, 84177.0], [48.4, 84177.0], [48.5, 84177.0], [48.6, 84177.0], [48.7, 84177.0], [48.8, 84177.0], [48.9, 84177.0], [49.0, 84216.0], [49.1, 84216.0], [49.2, 84216.0], [49.3, 84216.0], [49.4, 84216.0], [49.5, 84216.0], [49.6, 84216.0], [49.7, 84216.0], [49.8, 84216.0], [49.9, 84216.0], [50.0, 84259.0], [50.1, 84259.0], [50.2, 84259.0], [50.3, 84259.0], [50.4, 84259.0], [50.5, 84259.0], [50.6, 84259.0], [50.7, 84259.0], [50.8, 84259.0], [50.9, 84259.0], [51.0, 84263.0], [51.1, 84263.0], [51.2, 84263.0], [51.3, 84263.0], [51.4, 84263.0], [51.5, 84263.0], [51.6, 84263.0], [51.7, 84263.0], [51.8, 84263.0], [51.9, 84263.0], [52.0, 84291.0], [52.1, 84291.0], [52.2, 84291.0], [52.3, 84291.0], [52.4, 84291.0], [52.5, 84291.0], [52.6, 84291.0], [52.7, 84291.0], [52.8, 84291.0], [52.9, 84291.0], [53.0, 84332.0], [53.1, 84332.0], [53.2, 84332.0], [53.3, 84332.0], [53.4, 84332.0], [53.5, 84332.0], [53.6, 84332.0], [53.7, 84332.0], [53.8, 84332.0], [53.9, 84332.0], [54.0, 84383.0], [54.1, 84383.0], [54.2, 84383.0], [54.3, 84383.0], [54.4, 84383.0], [54.5, 84383.0], [54.6, 84383.0], [54.7, 84383.0], [54.8, 84383.0], [54.9, 84383.0], [55.0, 84384.0], [55.1, 84384.0], [55.2, 84384.0], [55.3, 84384.0], [55.4, 84384.0], [55.5, 84384.0], [55.6, 84384.0], [55.7, 84384.0], [55.8, 84384.0], [55.9, 84384.0], [56.0, 84403.0], [56.1, 84403.0], [56.2, 84403.0], [56.3, 84403.0], [56.4, 84403.0], [56.5, 84403.0], [56.6, 84403.0], [56.7, 84403.0], [56.8, 84403.0], [56.9, 84403.0], [57.0, 84405.0], [57.1, 84405.0], [57.2, 84405.0], [57.3, 84405.0], [57.4, 84405.0], [57.5, 84405.0], [57.6, 84405.0], [57.7, 84405.0], [57.8, 84405.0], [57.9, 84405.0], [58.0, 84409.0], [58.1, 84409.0], [58.2, 84409.0], [58.3, 84409.0], [58.4, 84409.0], [58.5, 84409.0], [58.6, 84409.0], [58.7, 84409.0], [58.8, 84409.0], [58.9, 84409.0], [59.0, 84418.0], [59.1, 84418.0], [59.2, 84418.0], [59.3, 84418.0], [59.4, 84418.0], [59.5, 84418.0], [59.6, 84418.0], [59.7, 84418.0], [59.8, 84418.0], [59.9, 84418.0], [60.0, 84440.0], [60.1, 84440.0], [60.2, 84440.0], [60.3, 84440.0], [60.4, 84440.0], [60.5, 84440.0], [60.6, 84440.0], [60.7, 84440.0], [60.8, 84440.0], [60.9, 84440.0], [61.0, 84477.0], [61.1, 84477.0], [61.2, 84477.0], [61.3, 84477.0], [61.4, 84477.0], [61.5, 84477.0], [61.6, 84477.0], [61.7, 84477.0], [61.8, 84477.0], [61.9, 84477.0], [62.0, 84481.0], [62.1, 84481.0], [62.2, 84481.0], [62.3, 84481.0], [62.4, 84481.0], [62.5, 84481.0], [62.6, 84481.0], [62.7, 84481.0], [62.8, 84481.0], [62.9, 84481.0], [63.0, 84482.0], [63.1, 84482.0], [63.2, 84482.0], [63.3, 84482.0], [63.4, 84482.0], [63.5, 84482.0], [63.6, 84482.0], [63.7, 84482.0], [63.8, 84482.0], [63.9, 84482.0], [64.0, 84491.0], [64.1, 84491.0], [64.2, 84491.0], [64.3, 84491.0], [64.4, 84491.0], [64.5, 84491.0], [64.6, 84491.0], [64.7, 84491.0], [64.8, 84491.0], [64.9, 84491.0], [65.0, 84493.0], [65.1, 84493.0], [65.2, 84493.0], [65.3, 84493.0], [65.4, 84493.0], [65.5, 84493.0], [65.6, 84493.0], [65.7, 84493.0], [65.8, 84493.0], [65.9, 84493.0], [66.0, 84498.0], [66.1, 84498.0], [66.2, 84498.0], [66.3, 84498.0], [66.4, 84498.0], [66.5, 84498.0], [66.6, 84498.0], [66.7, 84498.0], [66.8, 84498.0], [66.9, 84498.0], [67.0, 84499.0], [67.1, 84499.0], [67.2, 84499.0], [67.3, 84499.0], [67.4, 84499.0], [67.5, 84499.0], [67.6, 84499.0], [67.7, 84499.0], [67.8, 84499.0], [67.9, 84499.0], [68.0, 84499.0], [68.1, 84499.0], [68.2, 84499.0], [68.3, 84499.0], [68.4, 84499.0], [68.5, 84499.0], [68.6, 84499.0], [68.7, 84499.0], [68.8, 84499.0], [68.9, 84499.0], [69.0, 84500.0], [69.1, 84500.0], [69.2, 84500.0], [69.3, 84500.0], [69.4, 84500.0], [69.5, 84500.0], [69.6, 84500.0], [69.7, 84500.0], [69.8, 84500.0], [69.9, 84500.0], [70.0, 84506.0], [70.1, 84506.0], [70.2, 84506.0], [70.3, 84506.0], [70.4, 84506.0], [70.5, 84506.0], [70.6, 84506.0], [70.7, 84506.0], [70.8, 84506.0], [70.9, 84506.0], [71.0, 84508.0], [71.1, 84508.0], [71.2, 84508.0], [71.3, 84508.0], [71.4, 84508.0], [71.5, 84508.0], [71.6, 84508.0], [71.7, 84508.0], [71.8, 84508.0], [71.9, 84508.0], [72.0, 84509.0], [72.1, 84509.0], [72.2, 84509.0], [72.3, 84509.0], [72.4, 84509.0], [72.5, 84509.0], [72.6, 84509.0], [72.7, 84509.0], [72.8, 84509.0], [72.9, 84509.0], [73.0, 84516.0], [73.1, 84516.0], [73.2, 84516.0], [73.3, 84516.0], [73.4, 84516.0], [73.5, 84516.0], [73.6, 84516.0], [73.7, 84516.0], [73.8, 84516.0], [73.9, 84516.0], [74.0, 84527.0], [74.1, 84527.0], [74.2, 84527.0], [74.3, 84527.0], [74.4, 84527.0], [74.5, 84527.0], [74.6, 84527.0], [74.7, 84527.0], [74.8, 84527.0], [74.9, 84527.0], [75.0, 84580.0], [75.1, 84580.0], [75.2, 84580.0], [75.3, 84580.0], [75.4, 84580.0], [75.5, 84580.0], [75.6, 84580.0], [75.7, 84580.0], [75.8, 84580.0], [75.9, 84580.0], [76.0, 84594.0], [76.1, 84594.0], [76.2, 84594.0], [76.3, 84594.0], [76.4, 84594.0], [76.5, 84594.0], [76.6, 84594.0], [76.7, 84594.0], [76.8, 84594.0], [76.9, 84594.0], [77.0, 84596.0], [77.1, 84596.0], [77.2, 84596.0], [77.3, 84596.0], [77.4, 84596.0], [77.5, 84596.0], [77.6, 84596.0], [77.7, 84596.0], [77.8, 84596.0], [77.9, 84596.0], [78.0, 84602.0], [78.1, 84602.0], [78.2, 84602.0], [78.3, 84602.0], [78.4, 84602.0], [78.5, 84602.0], [78.6, 84602.0], [78.7, 84602.0], [78.8, 84602.0], [78.9, 84602.0], [79.0, 84604.0], [79.1, 84604.0], [79.2, 84604.0], [79.3, 84604.0], [79.4, 84604.0], [79.5, 84604.0], [79.6, 84604.0], [79.7, 84604.0], [79.8, 84604.0], [79.9, 84604.0], [80.0, 84624.0], [80.1, 84624.0], [80.2, 84624.0], [80.3, 84624.0], [80.4, 84624.0], [80.5, 84624.0], [80.6, 84624.0], [80.7, 84624.0], [80.8, 84624.0], [80.9, 84624.0], [81.0, 84627.0], [81.1, 84627.0], [81.2, 84627.0], [81.3, 84627.0], [81.4, 84627.0], [81.5, 84627.0], [81.6, 84627.0], [81.7, 84627.0], [81.8, 84627.0], [81.9, 84627.0], [82.0, 84639.0], [82.1, 84639.0], [82.2, 84639.0], [82.3, 84639.0], [82.4, 84639.0], [82.5, 84639.0], [82.6, 84639.0], [82.7, 84639.0], [82.8, 84639.0], [82.9, 84639.0], [83.0, 84666.0], [83.1, 84666.0], [83.2, 84666.0], [83.3, 84666.0], [83.4, 84666.0], [83.5, 84666.0], [83.6, 84666.0], [83.7, 84666.0], [83.8, 84666.0], [83.9, 84666.0], [84.0, 84701.0], [84.1, 84701.0], [84.2, 84701.0], [84.3, 84701.0], [84.4, 84701.0], [84.5, 84701.0], [84.6, 84701.0], [84.7, 84701.0], [84.8, 84701.0], [84.9, 84701.0], [85.0, 84718.0], [85.1, 84718.0], [85.2, 84718.0], [85.3, 84718.0], [85.4, 84718.0], [85.5, 84718.0], [85.6, 84718.0], [85.7, 84718.0], [85.8, 84718.0], [85.9, 84718.0], [86.0, 84724.0], [86.1, 84724.0], [86.2, 84724.0], [86.3, 84724.0], [86.4, 84724.0], [86.5, 84724.0], [86.6, 84724.0], [86.7, 84724.0], [86.8, 84724.0], [86.9, 84724.0], [87.0, 84795.0], [87.1, 84795.0], [87.2, 84795.0], [87.3, 84795.0], [87.4, 84795.0], [87.5, 84795.0], [87.6, 84795.0], [87.7, 84795.0], [87.8, 84795.0], [87.9, 84795.0], [88.0, 84796.0], [88.1, 84796.0], [88.2, 84796.0], [88.3, 84796.0], [88.4, 84796.0], [88.5, 84796.0], [88.6, 84796.0], [88.7, 84796.0], [88.8, 84796.0], [88.9, 84796.0], [89.0, 84796.0], [89.1, 84796.0], [89.2, 84796.0], [89.3, 84796.0], [89.4, 84796.0], [89.5, 84796.0], [89.6, 84796.0], [89.7, 84796.0], [89.8, 84796.0], [89.9, 84796.0], [90.0, 84798.0], [90.1, 84798.0], [90.2, 84798.0], [90.3, 84798.0], [90.4, 84798.0], [90.5, 84798.0], [90.6, 84798.0], [90.7, 84798.0], [90.8, 84798.0], [90.9, 84798.0], [91.0, 84804.0], [91.1, 84804.0], [91.2, 84804.0], [91.3, 84804.0], [91.4, 84804.0], [91.5, 84804.0], [91.6, 84804.0], [91.7, 84804.0], [91.8, 84804.0], [91.9, 84804.0], [92.0, 84806.0], [92.1, 84806.0], [92.2, 84806.0], [92.3, 84806.0], [92.4, 84806.0], [92.5, 84806.0], [92.6, 84806.0], [92.7, 84806.0], [92.8, 84806.0], [92.9, 84806.0], [93.0, 84807.0], [93.1, 84807.0], [93.2, 84807.0], [93.3, 84807.0], [93.4, 84807.0], [93.5, 84807.0], [93.6, 84807.0], [93.7, 84807.0], [93.8, 84807.0], [93.9, 84807.0], [94.0, 84820.0], [94.1, 84820.0], [94.2, 84820.0], [94.3, 84820.0], [94.4, 84820.0], [94.5, 84820.0], [94.6, 84820.0], [94.7, 84820.0], [94.8, 84820.0], [94.9, 84820.0], [95.0, 84829.0], [95.1, 84829.0], [95.2, 84829.0], [95.3, 84829.0], [95.4, 84829.0], [95.5, 84829.0], [95.6, 84829.0], [95.7, 84829.0], [95.8, 84829.0], [95.9, 84829.0], [96.0, 84830.0], [96.1, 84830.0], [96.2, 84830.0], [96.3, 84830.0], [96.4, 84830.0], [96.5, 84830.0], [96.6, 84830.0], [96.7, 84830.0], [96.8, 84830.0], [96.9, 84830.0], [97.0, 84895.0], [97.1, 84895.0], [97.2, 84895.0], [97.3, 84895.0], [97.4, 84895.0], [97.5, 84895.0], [97.6, 84895.0], [97.7, 84895.0], [97.8, 84895.0], [97.9, 84895.0], [98.0, 85000.0], [98.1, 85000.0], [98.2, 85000.0], [98.3, 85000.0], [98.4, 85000.0], [98.5, 85000.0], [98.6, 85000.0], [98.7, 85000.0], [98.8, 85000.0], [98.9, 85000.0], [99.0, 88898.0], [99.1, 88898.0], [99.2, 88898.0], [99.3, 88898.0], [99.4, 88898.0], [99.5, 88898.0], [99.6, 88898.0], [99.7, 88898.0], [99.8, 88898.0], [99.9, 88898.0]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[0.0, 113602.0], [0.1, 113602.0], [0.2, 113602.0], [0.3, 113602.0], [0.4, 113602.0], [0.5, 113602.0], [0.6, 113602.0], [0.7, 113602.0], [0.8, 113602.0], [0.9, 113602.0], [1.0, 113613.0], [1.1, 113613.0], [1.2, 113613.0], [1.3, 113613.0], [1.4, 113613.0], [1.5, 113613.0], [1.6, 113613.0], [1.7, 113613.0], [1.8, 113613.0], [1.9, 113613.0], [2.0, 113866.0], [2.1, 113866.0], [2.2, 113866.0], [2.3, 113866.0], [2.4, 113866.0], [2.5, 113866.0], [2.6, 113866.0], [2.7, 113866.0], [2.8, 113866.0], [2.9, 113866.0], [3.0, 113975.0], [3.1, 113975.0], [3.2, 113975.0], [3.3, 113975.0], [3.4, 113975.0], [3.5, 113975.0], [3.6, 113975.0], [3.7, 113975.0], [3.8, 113975.0], [3.9, 113975.0], [4.0, 114189.0], [4.1, 114189.0], [4.2, 114189.0], [4.3, 114189.0], [4.4, 114189.0], [4.5, 114189.0], [4.6, 114189.0], [4.7, 114189.0], [4.8, 114189.0], [4.9, 114189.0], [5.0, 114348.0], [5.1, 114348.0], [5.2, 114348.0], [5.3, 114348.0], [5.4, 114348.0], [5.5, 114348.0], [5.6, 114348.0], [5.7, 114348.0], [5.8, 114348.0], [5.9, 114348.0], [6.0, 114406.0], [6.1, 114406.0], [6.2, 114406.0], [6.3, 114406.0], [6.4, 114406.0], [6.5, 114406.0], [6.6, 114406.0], [6.7, 114406.0], [6.8, 114406.0], [6.9, 114406.0], [7.0, 114493.0], [7.1, 114493.0], [7.2, 114493.0], [7.3, 114493.0], [7.4, 114493.0], [7.5, 114493.0], [7.6, 114493.0], [7.7, 114493.0], [7.8, 114493.0], [7.9, 114493.0], [8.0, 114508.0], [8.1, 114508.0], [8.2, 114508.0], [8.3, 114508.0], [8.4, 114508.0], [8.5, 114508.0], [8.6, 114508.0], [8.7, 114508.0], [8.8, 114508.0], [8.9, 114508.0], [9.0, 114509.0], [9.1, 114509.0], [9.2, 114509.0], [9.3, 114509.0], [9.4, 114509.0], [9.5, 114509.0], [9.6, 114509.0], [9.7, 114509.0], [9.8, 114509.0], [9.9, 114509.0], [10.0, 114876.0], [10.1, 114876.0], [10.2, 114876.0], [10.3, 114876.0], [10.4, 114876.0], [10.5, 114876.0], [10.6, 114876.0], [10.7, 114876.0], [10.8, 114876.0], [10.9, 114876.0], [11.0, 114916.0], [11.1, 114916.0], [11.2, 114916.0], [11.3, 114916.0], [11.4, 114916.0], [11.5, 114916.0], [11.6, 114916.0], [11.7, 114916.0], [11.8, 114916.0], [11.9, 114916.0], [12.0, 114970.0], [12.1, 114970.0], [12.2, 114970.0], [12.3, 114970.0], [12.4, 114970.0], [12.5, 114970.0], [12.6, 114970.0], [12.7, 114970.0], [12.8, 114970.0], [12.9, 114970.0], [13.0, 114980.0], [13.1, 114980.0], [13.2, 114980.0], [13.3, 114980.0], [13.4, 114980.0], [13.5, 114980.0], [13.6, 114980.0], [13.7, 114980.0], [13.8, 114980.0], [13.9, 114980.0], [14.0, 115557.0], [14.1, 115557.0], [14.2, 115557.0], [14.3, 115557.0], [14.4, 115557.0], [14.5, 115557.0], [14.6, 115557.0], [14.7, 115557.0], [14.8, 115557.0], [14.9, 115557.0], [15.0, 116185.0], [15.1, 116185.0], [15.2, 116185.0], [15.3, 116185.0], [15.4, 116185.0], [15.5, 116185.0], [15.6, 116185.0], [15.7, 116185.0], [15.8, 116185.0], [15.9, 116185.0], [16.0, 116390.0], [16.1, 116390.0], [16.2, 116390.0], [16.3, 116390.0], [16.4, 116390.0], [16.5, 116390.0], [16.6, 116390.0], [16.7, 116390.0], [16.8, 116390.0], [16.9, 116390.0], [17.0, 116796.0], [17.1, 116796.0], [17.2, 116796.0], [17.3, 116796.0], [17.4, 116796.0], [17.5, 116796.0], [17.6, 116796.0], [17.7, 116796.0], [17.8, 116796.0], [17.9, 116796.0], [18.0, 117290.0], [18.1, 117290.0], [18.2, 117290.0], [18.3, 117290.0], [18.4, 117290.0], [18.5, 117290.0], [18.6, 117290.0], [18.7, 117290.0], [18.8, 117290.0], [18.9, 117290.0], [19.0, 117479.0], [19.1, 117479.0], [19.2, 117479.0], [19.3, 117479.0], [19.4, 117479.0], [19.5, 117479.0], [19.6, 117479.0], [19.7, 117479.0], [19.8, 117479.0], [19.9, 117479.0], [20.0, 117979.0], [20.1, 117979.0], [20.2, 117979.0], [20.3, 117979.0], [20.4, 117979.0], [20.5, 117979.0], [20.6, 117979.0], [20.7, 117979.0], [20.8, 117979.0], [20.9, 117979.0], [21.0, 118476.0], [21.1, 118476.0], [21.2, 118476.0], [21.3, 118476.0], [21.4, 118476.0], [21.5, 118476.0], [21.6, 118476.0], [21.7, 118476.0], [21.8, 118476.0], [21.9, 118476.0], [22.0, 118776.0], [22.1, 118776.0], [22.2, 118776.0], [22.3, 118776.0], [22.4, 118776.0], [22.5, 118776.0], [22.6, 118776.0], [22.7, 118776.0], [22.8, 118776.0], [22.9, 118776.0], [23.0, 118779.0], [23.1, 118779.0], [23.2, 118779.0], [23.3, 118779.0], [23.4, 118779.0], [23.5, 118779.0], [23.6, 118779.0], [23.7, 118779.0], [23.8, 118779.0], [23.9, 118779.0], [24.0, 120109.0], [24.1, 120109.0], [24.2, 120109.0], [24.3, 120109.0], [24.4, 120109.0], [24.5, 120109.0], [24.6, 120109.0], [24.7, 120109.0], [24.8, 120109.0], [24.9, 120109.0], [25.0, 121404.0], [25.1, 121404.0], [25.2, 121404.0], [25.3, 121404.0], [25.4, 121404.0], [25.5, 121404.0], [25.6, 121404.0], [25.7, 121404.0], [25.8, 121404.0], [25.9, 121404.0], [26.0, 122149.0], [26.1, 122149.0], [26.2, 122149.0], [26.3, 122149.0], [26.4, 122149.0], [26.5, 122149.0], [26.6, 122149.0], [26.7, 122149.0], [26.8, 122149.0], [26.9, 122149.0], [27.0, 125551.0], [27.1, 125551.0], [27.2, 125551.0], [27.3, 125551.0], [27.4, 125551.0], [27.5, 125551.0], [27.6, 125551.0], [27.7, 125551.0], [27.8, 125551.0], [27.9, 125551.0], [28.0, 130797.0], [28.1, 130797.0], [28.2, 130797.0], [28.3, 130797.0], [28.4, 130797.0], [28.5, 130797.0], [28.6, 130797.0], [28.7, 130797.0], [28.8, 130797.0], [28.9, 130797.0], [29.0, 131301.0], [29.1, 131301.0], [29.2, 131301.0], [29.3, 131301.0], [29.4, 131301.0], [29.5, 131301.0], [29.6, 131301.0], [29.7, 131301.0], [29.8, 131301.0], [29.9, 131301.0], [30.0, 131774.0], [30.1, 131774.0], [30.2, 131774.0], [30.3, 131774.0], [30.4, 131774.0], [30.5, 131774.0], [30.6, 131774.0], [30.7, 131774.0], [30.8, 131774.0], [30.9, 131774.0], [31.0, 132783.0], [31.1, 132783.0], [31.2, 132783.0], [31.3, 132783.0], [31.4, 132783.0], [31.5, 132783.0], [31.6, 132783.0], [31.7, 132783.0], [31.8, 132783.0], [31.9, 132783.0], [32.0, 134080.0], [32.1, 134080.0], [32.2, 134080.0], [32.3, 134080.0], [32.4, 134080.0], [32.5, 134080.0], [32.6, 134080.0], [32.7, 134080.0], [32.8, 134080.0], [32.9, 134080.0], [33.0, 134790.0], [33.1, 134790.0], [33.2, 134790.0], [33.3, 134790.0], [33.4, 134790.0], [33.5, 134790.0], [33.6, 134790.0], [33.7, 134790.0], [33.8, 134790.0], [33.9, 134790.0], [34.0, 140298.0], [34.1, 140298.0], [34.2, 140298.0], [34.3, 140298.0], [34.4, 140298.0], [34.5, 140298.0], [34.6, 140298.0], [34.7, 140298.0], [34.8, 140298.0], [34.9, 140298.0], [35.0, 144094.0], [35.1, 144094.0], [35.2, 144094.0], [35.3, 144094.0], [35.4, 144094.0], [35.5, 144094.0], [35.6, 144094.0], [35.7, 144094.0], [35.8, 144094.0], [35.9, 144094.0], [36.0, 146201.0], [36.1, 146201.0], [36.2, 146201.0], [36.3, 146201.0], [36.4, 146201.0], [36.5, 146201.0], [36.6, 146201.0], [36.7, 146201.0], [36.8, 146201.0], [36.9, 146201.0], [37.0, 151997.0], [37.1, 151997.0], [37.2, 151997.0], [37.3, 151997.0], [37.4, 151997.0], [37.5, 151997.0], [37.6, 151997.0], [37.7, 151997.0], [37.8, 151997.0], [37.9, 151997.0], [38.0, 154076.0], [38.1, 154076.0], [38.2, 154076.0], [38.3, 154076.0], [38.4, 154076.0], [38.5, 154076.0], [38.6, 154076.0], [38.7, 154076.0], [38.8, 154076.0], [38.9, 154076.0], [39.0, 154818.0], [39.1, 154818.0], [39.2, 154818.0], [39.3, 154818.0], [39.4, 154818.0], [39.5, 154818.0], [39.6, 154818.0], [39.7, 154818.0], [39.8, 154818.0], [39.9, 154818.0], [40.0, 156872.0], [40.1, 156872.0], [40.2, 156872.0], [40.3, 156872.0], [40.4, 156872.0], [40.5, 156872.0], [40.6, 156872.0], [40.7, 156872.0], [40.8, 156872.0], [40.9, 156872.0], [41.0, 158270.0], [41.1, 158270.0], [41.2, 158270.0], [41.3, 158270.0], [41.4, 158270.0], [41.5, 158270.0], [41.6, 158270.0], [41.7, 158270.0], [41.8, 158270.0], [41.9, 158270.0], [42.0, 159105.0], [42.1, 159105.0], [42.2, 159105.0], [42.3, 159105.0], [42.4, 159105.0], [42.5, 159105.0], [42.6, 159105.0], [42.7, 159105.0], [42.8, 159105.0], [42.9, 159105.0], [43.0, 159871.0], [43.1, 159871.0], [43.2, 159871.0], [43.3, 159871.0], [43.4, 159871.0], [43.5, 159871.0], [43.6, 159871.0], [43.7, 159871.0], [43.8, 159871.0], [43.9, 159871.0], [44.0, 160578.0], [44.1, 160578.0], [44.2, 160578.0], [44.3, 160578.0], [44.4, 160578.0], [44.5, 160578.0], [44.6, 160578.0], [44.7, 160578.0], [44.8, 160578.0], [44.9, 160578.0], [45.0, 161381.0], [45.1, 161381.0], [45.2, 161381.0], [45.3, 161381.0], [45.4, 161381.0], [45.5, 161381.0], [45.6, 161381.0], [45.7, 161381.0], [45.8, 161381.0], [45.9, 161381.0], [46.0, 162089.0], [46.1, 162089.0], [46.2, 162089.0], [46.3, 162089.0], [46.4, 162089.0], [46.5, 162089.0], [46.6, 162089.0], [46.7, 162089.0], [46.8, 162089.0], [46.9, 162089.0], [47.0, 162989.0], [47.1, 162989.0], [47.2, 162989.0], [47.3, 162989.0], [47.4, 162989.0], [47.5, 162989.0], [47.6, 162989.0], [47.7, 162989.0], [47.8, 162989.0], [47.9, 162989.0], [48.0, 163903.0], [48.1, 163903.0], [48.2, 163903.0], [48.3, 163903.0], [48.4, 163903.0], [48.5, 163903.0], [48.6, 163903.0], [48.7, 163903.0], [48.8, 163903.0], [48.9, 163903.0], [49.0, 164783.0], [49.1, 164783.0], [49.2, 164783.0], [49.3, 164783.0], [49.4, 164783.0], [49.5, 164783.0], [49.6, 164783.0], [49.7, 164783.0], [49.8, 164783.0], [49.9, 164783.0], [50.0, 164899.0], [50.1, 164899.0], [50.2, 164899.0], [50.3, 164899.0], [50.4, 164899.0], [50.5, 164899.0], [50.6, 164899.0], [50.7, 164899.0], [50.8, 164899.0], [50.9, 164899.0], [51.0, 165491.0], [51.1, 165491.0], [51.2, 165491.0], [51.3, 165491.0], [51.4, 165491.0], [51.5, 165491.0], [51.6, 165491.0], [51.7, 165491.0], [51.8, 165491.0], [51.9, 165491.0], [52.0, 166285.0], [52.1, 166285.0], [52.2, 166285.0], [52.3, 166285.0], [52.4, 166285.0], [52.5, 166285.0], [52.6, 166285.0], [52.7, 166285.0], [52.8, 166285.0], [52.9, 166285.0], [53.0, 167091.0], [53.1, 167091.0], [53.2, 167091.0], [53.3, 167091.0], [53.4, 167091.0], [53.5, 167091.0], [53.6, 167091.0], [53.7, 167091.0], [53.8, 167091.0], [53.9, 167091.0], [54.0, 167874.0], [54.1, 167874.0], [54.2, 167874.0], [54.3, 167874.0], [54.4, 167874.0], [54.5, 167874.0], [54.6, 167874.0], [54.7, 167874.0], [54.8, 167874.0], [54.9, 167874.0], [55.0, 168664.0], [55.1, 168664.0], [55.2, 168664.0], [55.3, 168664.0], [55.4, 168664.0], [55.5, 168664.0], [55.6, 168664.0], [55.7, 168664.0], [55.8, 168664.0], [55.9, 168664.0], [56.0, 168839.0], [56.1, 168839.0], [56.2, 168839.0], [56.3, 168839.0], [56.4, 168839.0], [56.5, 168839.0], [56.6, 168839.0], [56.7, 168839.0], [56.8, 168839.0], [56.9, 168839.0], [57.0, 169637.0], [57.1, 169637.0], [57.2, 169637.0], [57.3, 169637.0], [57.4, 169637.0], [57.5, 169637.0], [57.6, 169637.0], [57.7, 169637.0], [57.8, 169637.0], [57.9, 169637.0], [58.0, 171194.0], [58.1, 171194.0], [58.2, 171194.0], [58.3, 171194.0], [58.4, 171194.0], [58.5, 171194.0], [58.6, 171194.0], [58.7, 171194.0], [58.8, 171194.0], [58.9, 171194.0], [59.0, 171982.0], [59.1, 171982.0], [59.2, 171982.0], [59.3, 171982.0], [59.4, 171982.0], [59.5, 171982.0], [59.6, 171982.0], [59.7, 171982.0], [59.8, 171982.0], [59.9, 171982.0], [60.0, 172602.0], [60.1, 172602.0], [60.2, 172602.0], [60.3, 172602.0], [60.4, 172602.0], [60.5, 172602.0], [60.6, 172602.0], [60.7, 172602.0], [60.8, 172602.0], [60.9, 172602.0], [61.0, 173155.0], [61.1, 173155.0], [61.2, 173155.0], [61.3, 173155.0], [61.4, 173155.0], [61.5, 173155.0], [61.6, 173155.0], [61.7, 173155.0], [61.8, 173155.0], [61.9, 173155.0], [62.0, 173576.0], [62.1, 173576.0], [62.2, 173576.0], [62.3, 173576.0], [62.4, 173576.0], [62.5, 173576.0], [62.6, 173576.0], [62.7, 173576.0], [62.8, 173576.0], [62.9, 173576.0], [63.0, 173997.0], [63.1, 173997.0], [63.2, 173997.0], [63.3, 173997.0], [63.4, 173997.0], [63.5, 173997.0], [63.6, 173997.0], [63.7, 173997.0], [63.8, 173997.0], [63.9, 173997.0], [64.0, 174092.0], [64.1, 174092.0], [64.2, 174092.0], [64.3, 174092.0], [64.4, 174092.0], [64.5, 174092.0], [64.6, 174092.0], [64.7, 174092.0], [64.8, 174092.0], [64.9, 174092.0], [65.0, 174282.0], [65.1, 174282.0], [65.2, 174282.0], [65.3, 174282.0], [65.4, 174282.0], [65.5, 174282.0], [65.6, 174282.0], [65.7, 174282.0], [65.8, 174282.0], [65.9, 174282.0], [66.0, 174350.0], [66.1, 174350.0], [66.2, 174350.0], [66.3, 174350.0], [66.4, 174350.0], [66.5, 174350.0], [66.6, 174350.0], [66.7, 174350.0], [66.8, 174350.0], [66.9, 174350.0], [67.0, 174793.0], [67.1, 174793.0], [67.2, 174793.0], [67.3, 174793.0], [67.4, 174793.0], [67.5, 174793.0], [67.6, 174793.0], [67.7, 174793.0], [67.8, 174793.0], [67.9, 174793.0], [68.0, 174913.0], [68.1, 174913.0], [68.2, 174913.0], [68.3, 174913.0], [68.4, 174913.0], [68.5, 174913.0], [68.6, 174913.0], [68.7, 174913.0], [68.8, 174913.0], [68.9, 174913.0], [69.0, 174980.0], [69.1, 174980.0], [69.2, 174980.0], [69.3, 174980.0], [69.4, 174980.0], [69.5, 174980.0], [69.6, 174980.0], [69.7, 174980.0], [69.8, 174980.0], [69.9, 174980.0], [70.0, 175622.0], [70.1, 175622.0], [70.2, 175622.0], [70.3, 175622.0], [70.4, 175622.0], [70.5, 175622.0], [70.6, 175622.0], [70.7, 175622.0], [70.8, 175622.0], [70.9, 175622.0], [71.0, 175792.0], [71.1, 175792.0], [71.2, 175792.0], [71.3, 175792.0], [71.4, 175792.0], [71.5, 175792.0], [71.6, 175792.0], [71.7, 175792.0], [71.8, 175792.0], [71.9, 175792.0], [72.0, 176503.0], [72.1, 176503.0], [72.2, 176503.0], [72.3, 176503.0], [72.4, 176503.0], [72.5, 176503.0], [72.6, 176503.0], [72.7, 176503.0], [72.8, 176503.0], [72.9, 176503.0], [73.0, 177075.0], [73.1, 177075.0], [73.2, 177075.0], [73.3, 177075.0], [73.4, 177075.0], [73.5, 177075.0], [73.6, 177075.0], [73.7, 177075.0], [73.8, 177075.0], [73.9, 177075.0], [74.0, 177168.0], [74.1, 177168.0], [74.2, 177168.0], [74.3, 177168.0], [74.4, 177168.0], [74.5, 177168.0], [74.6, 177168.0], [74.7, 177168.0], [74.8, 177168.0], [74.9, 177168.0], [75.0, 177190.0], [75.1, 177190.0], [75.2, 177190.0], [75.3, 177190.0], [75.4, 177190.0], [75.5, 177190.0], [75.6, 177190.0], [75.7, 177190.0], [75.8, 177190.0], [75.9, 177190.0], [76.0, 177863.0], [76.1, 177863.0], [76.2, 177863.0], [76.3, 177863.0], [76.4, 177863.0], [76.5, 177863.0], [76.6, 177863.0], [76.7, 177863.0], [76.8, 177863.0], [76.9, 177863.0], [77.0, 178183.0], [77.1, 178183.0], [77.2, 178183.0], [77.3, 178183.0], [77.4, 178183.0], [77.5, 178183.0], [77.6, 178183.0], [77.7, 178183.0], [77.8, 178183.0], [77.9, 178183.0], [78.0, 178565.0], [78.1, 178565.0], [78.2, 178565.0], [78.3, 178565.0], [78.4, 178565.0], [78.5, 178565.0], [78.6, 178565.0], [78.7, 178565.0], [78.8, 178565.0], [78.9, 178565.0], [79.0, 179199.0], [79.1, 179199.0], [79.2, 179199.0], [79.3, 179199.0], [79.4, 179199.0], [79.5, 179199.0], [79.6, 179199.0], [79.7, 179199.0], [79.8, 179199.0], [79.9, 179199.0], [80.0, 179272.0], [80.1, 179272.0], [80.2, 179272.0], [80.3, 179272.0], [80.4, 179272.0], [80.5, 179272.0], [80.6, 179272.0], [80.7, 179272.0], [80.8, 179272.0], [80.9, 179272.0], [81.0, 179868.0], [81.1, 179868.0], [81.2, 179868.0], [81.3, 179868.0], [81.4, 179868.0], [81.5, 179868.0], [81.6, 179868.0], [81.7, 179868.0], [81.8, 179868.0], [81.9, 179868.0], [82.0, 179979.0], [82.1, 179979.0], [82.2, 179979.0], [82.3, 179979.0], [82.4, 179979.0], [82.5, 179979.0], [82.6, 179979.0], [82.7, 179979.0], [82.8, 179979.0], [82.9, 179979.0], [83.0, 180117.0], [83.1, 180117.0], [83.2, 180117.0], [83.3, 180117.0], [83.4, 180117.0], [83.5, 180117.0], [83.6, 180117.0], [83.7, 180117.0], [83.8, 180117.0], [83.9, 180117.0], [84.0, 180163.0], [84.1, 180163.0], [84.2, 180163.0], [84.3, 180163.0], [84.4, 180163.0], [84.5, 180163.0], [84.6, 180163.0], [84.7, 180163.0], [84.8, 180163.0], [84.9, 180163.0], [85.0, 180879.0], [85.1, 180879.0], [85.2, 180879.0], [85.3, 180879.0], [85.4, 180879.0], [85.5, 180879.0], [85.6, 180879.0], [85.7, 180879.0], [85.8, 180879.0], [85.9, 180879.0], [86.0, 181689.0], [86.1, 181689.0], [86.2, 181689.0], [86.3, 181689.0], [86.4, 181689.0], [86.5, 181689.0], [86.6, 181689.0], [86.7, 181689.0], [86.8, 181689.0], [86.9, 181689.0], [87.0, 181884.0], [87.1, 181884.0], [87.2, 181884.0], [87.3, 181884.0], [87.4, 181884.0], [87.5, 181884.0], [87.6, 181884.0], [87.7, 181884.0], [87.8, 181884.0], [87.9, 181884.0], [88.0, 183071.0], [88.1, 183071.0], [88.2, 183071.0], [88.3, 183071.0], [88.4, 183071.0], [88.5, 183071.0], [88.6, 183071.0], [88.7, 183071.0], [88.8, 183071.0], [88.9, 183071.0], [89.0, 183170.0], [89.1, 183170.0], [89.2, 183170.0], [89.3, 183170.0], [89.4, 183170.0], [89.5, 183170.0], [89.6, 183170.0], [89.7, 183170.0], [89.8, 183170.0], [89.9, 183170.0], [90.0, 183380.0], [90.1, 183380.0], [90.2, 183380.0], [90.3, 183380.0], [90.4, 183380.0], [90.5, 183380.0], [90.6, 183380.0], [90.7, 183380.0], [90.8, 183380.0], [90.9, 183380.0], [91.0, 183577.0], [91.1, 183577.0], [91.2, 183577.0], [91.3, 183577.0], [91.4, 183577.0], [91.5, 183577.0], [91.6, 183577.0], [91.7, 183577.0], [91.8, 183577.0], [91.9, 183577.0], [92.0, 183949.0], [92.1, 183949.0], [92.2, 183949.0], [92.3, 183949.0], [92.4, 183949.0], [92.5, 183949.0], [92.6, 183949.0], [92.7, 183949.0], [92.8, 183949.0], [92.9, 183949.0], [93.0, 183991.0], [93.1, 183991.0], [93.2, 183991.0], [93.3, 183991.0], [93.4, 183991.0], [93.5, 183991.0], [93.6, 183991.0], [93.7, 183991.0], [93.8, 183991.0], [93.9, 183991.0], [94.0, 184569.0], [94.1, 184569.0], [94.2, 184569.0], [94.3, 184569.0], [94.4, 184569.0], [94.5, 184569.0], [94.6, 184569.0], [94.7, 184569.0], [94.8, 184569.0], [94.9, 184569.0], [95.0, 184684.0], [95.1, 184684.0], [95.2, 184684.0], [95.3, 184684.0], [95.4, 184684.0], [95.5, 184684.0], [95.6, 184684.0], [95.7, 184684.0], [95.8, 184684.0], [95.9, 184684.0], [96.0, 184761.0], [96.1, 184761.0], [96.2, 184761.0], [96.3, 184761.0], [96.4, 184761.0], [96.5, 184761.0], [96.6, 184761.0], [96.7, 184761.0], [96.8, 184761.0], [96.9, 184761.0], [97.0, 184823.0], [97.1, 184823.0], [97.2, 184823.0], [97.3, 184823.0], [97.4, 184823.0], [97.5, 184823.0], [97.6, 184823.0], [97.7, 184823.0], [97.8, 184823.0], [97.9, 184823.0], [98.0, 184989.0], [98.1, 184989.0], [98.2, 184989.0], [98.3, 184989.0], [98.4, 184989.0], [98.5, 184989.0], [98.6, 184989.0], [98.7, 184989.0], [98.8, 184989.0], [98.9, 184989.0], [99.0, 185389.0], [99.1, 185389.0], [99.2, 185389.0], [99.3, 185389.0], [99.4, 185389.0], [99.5, 185389.0], [99.6, 185389.0], [99.7, 185389.0], [99.8, 185389.0], [99.9, 185389.0]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[0.0, 1103.0], [0.1, 1103.0], [0.2, 1103.0], [0.3, 1103.0], [0.4, 1103.0], [0.5, 1103.0], [0.6, 1103.0], [0.7, 1103.0], [0.8, 1103.0], [0.9, 1103.0], [1.0, 1163.0], [1.1, 1163.0], [1.2, 1163.0], [1.3, 1163.0], [1.4, 1163.0], [1.5, 1163.0], [1.6, 1163.0], [1.7, 1163.0], [1.8, 1163.0], [1.9, 1163.0], [2.0, 1308.0], [2.1, 1308.0], [2.2, 1308.0], [2.3, 1308.0], [2.4, 1308.0], [2.5, 1308.0], [2.6, 1308.0], [2.7, 1308.0], [2.8, 1308.0], [2.9, 1308.0], [3.0, 1335.0], [3.1, 1335.0], [3.2, 1335.0], [3.3, 1335.0], [3.4, 1335.0], [3.5, 1335.0], [3.6, 1335.0], [3.7, 1335.0], [3.8, 1335.0], [3.9, 1335.0], [4.0, 1468.0], [4.1, 1468.0], [4.2, 1468.0], [4.3, 1468.0], [4.4, 1468.0], [4.5, 1468.0], [4.6, 1468.0], [4.7, 1468.0], [4.8, 1468.0], [4.9, 1468.0], [5.0, 1490.0], [5.1, 1490.0], [5.2, 1490.0], [5.3, 1490.0], [5.4, 1490.0], [5.5, 1490.0], [5.6, 1490.0], [5.7, 1490.0], [5.8, 1490.0], [5.9, 1490.0], [6.0, 1534.0], [6.1, 1534.0], [6.2, 1534.0], [6.3, 1534.0], [6.4, 1534.0], [6.5, 1534.0], [6.6, 1534.0], [6.7, 1534.0], [6.8, 1534.0], [6.9, 1534.0], [7.0, 1577.0], [7.1, 1577.0], [7.2, 1577.0], [7.3, 1577.0], [7.4, 1577.0], [7.5, 1577.0], [7.6, 1577.0], [7.7, 1577.0], [7.8, 1577.0], [7.9, 1577.0], [8.0, 1609.0], [8.1, 1609.0], [8.2, 1609.0], [8.3, 1609.0], [8.4, 1609.0], [8.5, 1609.0], [8.6, 1609.0], [8.7, 1609.0], [8.8, 1609.0], [8.9, 1609.0], [9.0, 1627.0], [9.1, 1627.0], [9.2, 1627.0], [9.3, 1627.0], [9.4, 1627.0], [9.5, 1627.0], [9.6, 1627.0], [9.7, 1627.0], [9.8, 1627.0], [9.9, 1627.0], [10.0, 1712.0], [10.1, 1712.0], [10.2, 1712.0], [10.3, 1712.0], [10.4, 1712.0], [10.5, 1712.0], [10.6, 1712.0], [10.7, 1712.0], [10.8, 1712.0], [10.9, 1712.0], [11.0, 1759.0], [11.1, 1759.0], [11.2, 1759.0], [11.3, 1759.0], [11.4, 1759.0], [11.5, 1759.0], [11.6, 1759.0], [11.7, 1759.0], [11.8, 1759.0], [11.9, 1759.0], [12.0, 1761.0], [12.1, 1761.0], [12.2, 1761.0], [12.3, 1761.0], [12.4, 1761.0], [12.5, 1761.0], [12.6, 1761.0], [12.7, 1761.0], [12.8, 1761.0], [12.9, 1761.0], [13.0, 1765.0], [13.1, 1765.0], [13.2, 1765.0], [13.3, 1765.0], [13.4, 1765.0], [13.5, 1765.0], [13.6, 1765.0], [13.7, 1765.0], [13.8, 1765.0], [13.9, 1765.0], [14.0, 1766.0], [14.1, 1766.0], [14.2, 1766.0], [14.3, 1766.0], [14.4, 1766.0], [14.5, 1766.0], [14.6, 1766.0], [14.7, 1766.0], [14.8, 1766.0], [14.9, 1766.0], [15.0, 1828.0], [15.1, 1828.0], [15.2, 1828.0], [15.3, 1828.0], [15.4, 1828.0], [15.5, 1828.0], [15.6, 1828.0], [15.7, 1828.0], [15.8, 1828.0], [15.9, 1828.0], [16.0, 1841.0], [16.1, 1841.0], [16.2, 1841.0], [16.3, 1841.0], [16.4, 1841.0], [16.5, 1841.0], [16.6, 1841.0], [16.7, 1841.0], [16.8, 1841.0], [16.9, 1841.0], [17.0, 1858.0], [17.1, 1858.0], [17.2, 1858.0], [17.3, 1858.0], [17.4, 1858.0], [17.5, 1858.0], [17.6, 1858.0], [17.7, 1858.0], [17.8, 1858.0], [17.9, 1858.0], [18.0, 1861.0], [18.1, 1861.0], [18.2, 1861.0], [18.3, 1861.0], [18.4, 1861.0], [18.5, 1861.0], [18.6, 1861.0], [18.7, 1861.0], [18.8, 1861.0], [18.9, 1861.0], [19.0, 1923.0], [19.1, 1923.0], [19.2, 1923.0], [19.3, 1923.0], [19.4, 1923.0], [19.5, 1923.0], [19.6, 1923.0], [19.7, 1923.0], [19.8, 1923.0], [19.9, 1923.0], [20.0, 1944.0], [20.1, 1944.0], [20.2, 1944.0], [20.3, 1944.0], [20.4, 1944.0], [20.5, 1944.0], [20.6, 1944.0], [20.7, 1944.0], [20.8, 1944.0], [20.9, 1944.0], [21.0, 2034.0], [21.1, 2034.0], [21.2, 2034.0], [21.3, 2034.0], [21.4, 2034.0], [21.5, 2034.0], [21.6, 2034.0], [21.7, 2034.0], [21.8, 2034.0], [21.9, 2034.0], [22.0, 2090.0], [22.1, 2090.0], [22.2, 2090.0], [22.3, 2090.0], [22.4, 2090.0], [22.5, 2090.0], [22.6, 2090.0], [22.7, 2090.0], [22.8, 2090.0], [22.9, 2090.0], [23.0, 2096.0], [23.1, 2096.0], [23.2, 2096.0], [23.3, 2096.0], [23.4, 2096.0], [23.5, 2096.0], [23.6, 2096.0], [23.7, 2096.0], [23.8, 2096.0], [23.9, 2096.0], [24.0, 2098.0], [24.1, 2098.0], [24.2, 2098.0], [24.3, 2098.0], [24.4, 2098.0], [24.5, 2098.0], [24.6, 2098.0], [24.7, 2098.0], [24.8, 2098.0], [24.9, 2098.0], [25.0, 2253.0], [25.1, 2253.0], [25.2, 2253.0], [25.3, 2253.0], [25.4, 2253.0], [25.5, 2253.0], [25.6, 2253.0], [25.7, 2253.0], [25.8, 2253.0], [25.9, 2253.0], [26.0, 2276.0], [26.1, 2276.0], [26.2, 2276.0], [26.3, 2276.0], [26.4, 2276.0], [26.5, 2276.0], [26.6, 2276.0], [26.7, 2276.0], [26.8, 2276.0], [26.9, 2276.0], [27.0, 2328.0], [27.1, 2328.0], [27.2, 2328.0], [27.3, 2328.0], [27.4, 2328.0], [27.5, 2328.0], [27.6, 2328.0], [27.7, 2328.0], [27.8, 2328.0], [27.9, 2328.0], [28.0, 2401.0], [28.1, 2401.0], [28.2, 2401.0], [28.3, 2401.0], [28.4, 2401.0], [28.5, 2401.0], [28.6, 2401.0], [28.7, 2401.0], [28.8, 2401.0], [28.9, 2401.0], [29.0, 2425.0], [29.1, 2425.0], [29.2, 2425.0], [29.3, 2425.0], [29.4, 2425.0], [29.5, 2425.0], [29.6, 2425.0], [29.7, 2425.0], [29.8, 2425.0], [29.9, 2425.0], [30.0, 2437.0], [30.1, 2437.0], [30.2, 2437.0], [30.3, 2437.0], [30.4, 2437.0], [30.5, 2437.0], [30.6, 2437.0], [30.7, 2437.0], [30.8, 2437.0], [30.9, 2437.0], [31.0, 2574.0], [31.1, 2574.0], [31.2, 2574.0], [31.3, 2574.0], [31.4, 2574.0], [31.5, 2574.0], [31.6, 2574.0], [31.7, 2574.0], [31.8, 2574.0], [31.9, 2574.0], [32.0, 2794.0], [32.1, 2794.0], [32.2, 2794.0], [32.3, 2794.0], [32.4, 2794.0], [32.5, 2794.0], [32.6, 2794.0], [32.7, 2794.0], [32.8, 2794.0], [32.9, 2794.0], [33.0, 2868.0], [33.1, 2868.0], [33.2, 2868.0], [33.3, 2868.0], [33.4, 2868.0], [33.5, 2868.0], [33.6, 2868.0], [33.7, 2868.0], [33.8, 2868.0], [33.9, 2868.0], [34.0, 2943.0], [34.1, 2943.0], [34.2, 2943.0], [34.3, 2943.0], [34.4, 2943.0], [34.5, 2943.0], [34.6, 2943.0], [34.7, 2943.0], [34.8, 2943.0], [34.9, 2943.0], [35.0, 2964.0], [35.1, 2964.0], [35.2, 2964.0], [35.3, 2964.0], [35.4, 2964.0], [35.5, 2964.0], [35.6, 2964.0], [35.7, 2964.0], [35.8, 2964.0], [35.9, 2964.0], [36.0, 3101.0], [36.1, 3101.0], [36.2, 3101.0], [36.3, 3101.0], [36.4, 3101.0], [36.5, 3101.0], [36.6, 3101.0], [36.7, 3101.0], [36.8, 3101.0], [36.9, 3101.0], [37.0, 4372.0], [37.1, 4372.0], [37.2, 4372.0], [37.3, 4372.0], [37.4, 4372.0], [37.5, 4372.0], [37.6, 4372.0], [37.7, 4372.0], [37.8, 4372.0], [37.9, 4372.0], [38.0, 5272.0], [38.1, 5272.0], [38.2, 5272.0], [38.3, 5272.0], [38.4, 5272.0], [38.5, 5272.0], [38.6, 5272.0], [38.7, 5272.0], [38.8, 5272.0], [38.9, 5272.0], [39.0, 5811.0], [39.1, 5811.0], [39.2, 5811.0], [39.3, 5811.0], [39.4, 5811.0], [39.5, 5811.0], [39.6, 5811.0], [39.7, 5811.0], [39.8, 5811.0], [39.9, 5811.0], [40.0, 6874.0], [40.1, 6874.0], [40.2, 6874.0], [40.3, 6874.0], [40.4, 6874.0], [40.5, 6874.0], [40.6, 6874.0], [40.7, 6874.0], [40.8, 6874.0], [40.9, 6874.0], [41.0, 8261.0], [41.1, 8261.0], [41.2, 8261.0], [41.3, 8261.0], [41.4, 8261.0], [41.5, 8261.0], [41.6, 8261.0], [41.7, 8261.0], [41.8, 8261.0], [41.9, 8261.0], [42.0, 9836.0], [42.1, 9836.0], [42.2, 9836.0], [42.3, 9836.0], [42.4, 9836.0], [42.5, 9836.0], [42.6, 9836.0], [42.7, 9836.0], [42.8, 9836.0], [42.9, 9836.0], [43.0, 10589.0], [43.1, 10589.0], [43.2, 10589.0], [43.3, 10589.0], [43.4, 10589.0], [43.5, 10589.0], [43.6, 10589.0], [43.7, 10589.0], [43.8, 10589.0], [43.9, 10589.0], [44.0, 11519.0], [44.1, 11519.0], [44.2, 11519.0], [44.3, 11519.0], [44.4, 11519.0], [44.5, 11519.0], [44.6, 11519.0], [44.7, 11519.0], [44.8, 11519.0], [44.9, 11519.0], [45.0, 15499.0], [45.1, 15499.0], [45.2, 15499.0], [45.3, 15499.0], [45.4, 15499.0], [45.5, 15499.0], [45.6, 15499.0], [45.7, 15499.0], [45.8, 15499.0], [45.9, 15499.0], [46.0, 19543.0], [46.1, 19543.0], [46.2, 19543.0], [46.3, 19543.0], [46.4, 19543.0], [46.5, 19543.0], [46.6, 19543.0], [46.7, 19543.0], [46.8, 19543.0], [46.9, 19543.0], [47.0, 22495.0], [47.1, 22495.0], [47.2, 22495.0], [47.3, 22495.0], [47.4, 22495.0], [47.5, 22495.0], [47.6, 22495.0], [47.7, 22495.0], [47.8, 22495.0], [47.9, 22495.0], [48.0, 25028.0], [48.1, 25028.0], [48.2, 25028.0], [48.3, 25028.0], [48.4, 25028.0], [48.5, 25028.0], [48.6, 25028.0], [48.7, 25028.0], [48.8, 25028.0], [48.9, 25028.0], [49.0, 25122.0], [49.1, 25122.0], [49.2, 25122.0], [49.3, 25122.0], [49.4, 25122.0], [49.5, 25122.0], [49.6, 25122.0], [49.7, 25122.0], [49.8, 25122.0], [49.9, 25122.0], [50.0, 25333.0], [50.1, 25333.0], [50.2, 25333.0], [50.3, 25333.0], [50.4, 25333.0], [50.5, 25333.0], [50.6, 25333.0], [50.7, 25333.0], [50.8, 25333.0], [50.9, 25333.0], [51.0, 25902.0], [51.1, 25902.0], [51.2, 25902.0], [51.3, 25902.0], [51.4, 25902.0], [51.5, 25902.0], [51.6, 25902.0], [51.7, 25902.0], [51.8, 25902.0], [51.9, 25902.0], [52.0, 26026.0], [52.1, 26026.0], [52.2, 26026.0], [52.3, 26026.0], [52.4, 26026.0], [52.5, 26026.0], [52.6, 26026.0], [52.7, 26026.0], [52.8, 26026.0], [52.9, 26026.0], [53.0, 26594.0], [53.1, 26594.0], [53.2, 26594.0], [53.3, 26594.0], [53.4, 26594.0], [53.5, 26594.0], [53.6, 26594.0], [53.7, 26594.0], [53.8, 26594.0], [53.9, 26594.0], [54.0, 26616.0], [54.1, 26616.0], [54.2, 26616.0], [54.3, 26616.0], [54.4, 26616.0], [54.5, 26616.0], [54.6, 26616.0], [54.7, 26616.0], [54.8, 26616.0], [54.9, 26616.0], [55.0, 26716.0], [55.1, 26716.0], [55.2, 26716.0], [55.3, 26716.0], [55.4, 26716.0], [55.5, 26716.0], [55.6, 26716.0], [55.7, 26716.0], [55.8, 26716.0], [55.9, 26716.0], [56.0, 26733.0], [56.1, 26733.0], [56.2, 26733.0], [56.3, 26733.0], [56.4, 26733.0], [56.5, 26733.0], [56.6, 26733.0], [56.7, 26733.0], [56.8, 26733.0], [56.9, 26733.0], [57.0, 26762.0], [57.1, 26762.0], [57.2, 26762.0], [57.3, 26762.0], [57.4, 26762.0], [57.5, 26762.0], [57.6, 26762.0], [57.7, 26762.0], [57.8, 26762.0], [57.9, 26762.0], [58.0, 26960.0], [58.1, 26960.0], [58.2, 26960.0], [58.3, 26960.0], [58.4, 26960.0], [58.5, 26960.0], [58.6, 26960.0], [58.7, 26960.0], [58.8, 26960.0], [58.9, 26960.0], [59.0, 34111.0], [59.1, 34111.0], [59.2, 34111.0], [59.3, 34111.0], [59.4, 34111.0], [59.5, 34111.0], [59.6, 34111.0], [59.7, 34111.0], [59.8, 34111.0], [59.9, 34111.0], [60.0, 44538.0], [60.1, 44538.0], [60.2, 44538.0], [60.3, 44538.0], [60.4, 44538.0], [60.5, 44538.0], [60.6, 44538.0], [60.7, 44538.0], [60.8, 44538.0], [60.9, 44538.0], [61.0, 54761.0], [61.1, 54761.0], [61.2, 54761.0], [61.3, 54761.0], [61.4, 54761.0], [61.5, 54761.0], [61.6, 54761.0], [61.7, 54761.0], [61.8, 54761.0], [61.9, 54761.0], [62.0, 56163.0], [62.1, 56163.0], [62.2, 56163.0], [62.3, 56163.0], [62.4, 56163.0], [62.5, 56163.0], [62.6, 56163.0], [62.7, 56163.0], [62.8, 56163.0], [62.9, 56163.0], [63.0, 65329.0], [63.1, 65329.0], [63.2, 65329.0], [63.3, 65329.0], [63.4, 65329.0], [63.5, 65329.0], [63.6, 65329.0], [63.7, 65329.0], [63.8, 65329.0], [63.9, 65329.0], [64.0, 68446.0], [64.1, 68446.0], [64.2, 68446.0], [64.3, 68446.0], [64.4, 68446.0], [64.5, 68446.0], [64.6, 68446.0], [64.7, 68446.0], [64.8, 68446.0], [64.9, 68446.0], [65.0, 73340.0], [65.1, 73340.0], [65.2, 73340.0], [65.3, 73340.0], [65.4, 73340.0], [65.5, 73340.0], [65.6, 73340.0], [65.7, 73340.0], [65.8, 73340.0], [65.9, 73340.0], [66.0, 79547.0], [66.1, 79547.0], [66.2, 79547.0], [66.3, 79547.0], [66.4, 79547.0], [66.5, 79547.0], [66.6, 79547.0], [66.7, 79547.0], [66.8, 79547.0], [66.9, 79547.0], [67.0, 81141.0], [67.1, 81141.0], [67.2, 81141.0], [67.3, 81141.0], [67.4, 81141.0], [67.5, 81141.0], [67.6, 81141.0], [67.7, 81141.0], [67.8, 81141.0], [67.9, 81141.0], [68.0, 82793.0], [68.1, 82793.0], [68.2, 82793.0], [68.3, 82793.0], [68.4, 82793.0], [68.5, 82793.0], [68.6, 82793.0], [68.7, 82793.0], [68.8, 82793.0], [68.9, 82793.0], [69.0, 85516.0], [69.1, 85516.0], [69.2, 85516.0], [69.3, 85516.0], [69.4, 85516.0], [69.5, 85516.0], [69.6, 85516.0], [69.7, 85516.0], [69.8, 85516.0], [69.9, 85516.0], [70.0, 85641.0], [70.1, 85641.0], [70.2, 85641.0], [70.3, 85641.0], [70.4, 85641.0], [70.5, 85641.0], [70.6, 85641.0], [70.7, 85641.0], [70.8, 85641.0], [70.9, 85641.0], [71.0, 87160.0], [71.1, 87160.0], [71.2, 87160.0], [71.3, 87160.0], [71.4, 87160.0], [71.5, 87160.0], [71.6, 87160.0], [71.7, 87160.0], [71.8, 87160.0], [71.9, 87160.0], [72.0, 93965.0], [72.1, 93965.0], [72.2, 93965.0], [72.3, 93965.0], [72.4, 93965.0], [72.5, 93965.0], [72.6, 93965.0], [72.7, 93965.0], [72.8, 93965.0], [72.9, 93965.0], [73.0, 98536.0], [73.1, 98536.0], [73.2, 98536.0], [73.3, 98536.0], [73.4, 98536.0], [73.5, 98536.0], [73.6, 98536.0], [73.7, 98536.0], [73.8, 98536.0], [73.9, 98536.0], [74.0, 98733.0], [74.1, 98733.0], [74.2, 98733.0], [74.3, 98733.0], [74.4, 98733.0], [74.5, 98733.0], [74.6, 98733.0], [74.7, 98733.0], [74.8, 98733.0], [74.9, 98733.0], [75.0, 101161.0], [75.1, 101161.0], [75.2, 101161.0], [75.3, 101161.0], [75.4, 101161.0], [75.5, 101161.0], [75.6, 101161.0], [75.7, 101161.0], [75.8, 101161.0], [75.9, 101161.0], [76.0, 105471.0], [76.1, 105471.0], [76.2, 105471.0], [76.3, 105471.0], [76.4, 105471.0], [76.5, 105471.0], [76.6, 105471.0], [76.7, 105471.0], [76.8, 105471.0], [76.9, 105471.0], [77.0, 106463.0], [77.1, 106463.0], [77.2, 106463.0], [77.3, 106463.0], [77.4, 106463.0], [77.5, 106463.0], [77.6, 106463.0], [77.7, 106463.0], [77.8, 106463.0], [77.9, 106463.0], [78.0, 108616.0], [78.1, 108616.0], [78.2, 108616.0], [78.3, 108616.0], [78.4, 108616.0], [78.5, 108616.0], [78.6, 108616.0], [78.7, 108616.0], [78.8, 108616.0], [78.9, 108616.0], [79.0, 110609.0], [79.1, 110609.0], [79.2, 110609.0], [79.3, 110609.0], [79.4, 110609.0], [79.5, 110609.0], [79.6, 110609.0], [79.7, 110609.0], [79.8, 110609.0], [79.9, 110609.0], [80.0, 110834.0], [80.1, 110834.0], [80.2, 110834.0], [80.3, 110834.0], [80.4, 110834.0], [80.5, 110834.0], [80.6, 110834.0], [80.7, 110834.0], [80.8, 110834.0], [80.9, 110834.0], [81.0, 111535.0], [81.1, 111535.0], [81.2, 111535.0], [81.3, 111535.0], [81.4, 111535.0], [81.5, 111535.0], [81.6, 111535.0], [81.7, 111535.0], [81.8, 111535.0], [81.9, 111535.0], [82.0, 113143.0], [82.1, 113143.0], [82.2, 113143.0], [82.3, 113143.0], [82.4, 113143.0], [82.5, 113143.0], [82.6, 113143.0], [82.7, 113143.0], [82.8, 113143.0], [82.9, 113143.0], [83.0, 114640.0], [83.1, 114640.0], [83.2, 114640.0], [83.3, 114640.0], [83.4, 114640.0], [83.5, 114640.0], [83.6, 114640.0], [83.7, 114640.0], [83.8, 114640.0], [83.9, 114640.0], [84.0, 114653.0], [84.1, 114653.0], [84.2, 114653.0], [84.3, 114653.0], [84.4, 114653.0], [84.5, 114653.0], [84.6, 114653.0], [84.7, 114653.0], [84.8, 114653.0], [84.9, 114653.0], [85.0, 114947.0], [85.1, 114947.0], [85.2, 114947.0], [85.3, 114947.0], [85.4, 114947.0], [85.5, 114947.0], [85.6, 114947.0], [85.7, 114947.0], [85.8, 114947.0], [85.9, 114947.0], [86.0, 116742.0], [86.1, 116742.0], [86.2, 116742.0], [86.3, 116742.0], [86.4, 116742.0], [86.5, 116742.0], [86.6, 116742.0], [86.7, 116742.0], [86.8, 116742.0], [86.9, 116742.0], [87.0, 118050.0], [87.1, 118050.0], [87.2, 118050.0], [87.3, 118050.0], [87.4, 118050.0], [87.5, 118050.0], [87.6, 118050.0], [87.7, 118050.0], [87.8, 118050.0], [87.9, 118050.0], [88.0, 118054.0], [88.1, 118054.0], [88.2, 118054.0], [88.3, 118054.0], [88.4, 118054.0], [88.5, 118054.0], [88.6, 118054.0], [88.7, 118054.0], [88.8, 118054.0], [88.9, 118054.0], [89.0, 118463.0], [89.1, 118463.0], [89.2, 118463.0], [89.3, 118463.0], [89.4, 118463.0], [89.5, 118463.0], [89.6, 118463.0], [89.7, 118463.0], [89.8, 118463.0], [89.9, 118463.0], [90.0, 119484.0], [90.1, 119484.0], [90.2, 119484.0], [90.3, 119484.0], [90.4, 119484.0], [90.5, 119484.0], [90.6, 119484.0], [90.7, 119484.0], [90.8, 119484.0], [90.9, 119484.0], [91.0, 119652.0], [91.1, 119652.0], [91.2, 119652.0], [91.3, 119652.0], [91.4, 119652.0], [91.5, 119652.0], [91.6, 119652.0], [91.7, 119652.0], [91.8, 119652.0], [91.9, 119652.0], [92.0, 119936.0], [92.1, 119936.0], [92.2, 119936.0], [92.3, 119936.0], [92.4, 119936.0], [92.5, 119936.0], [92.6, 119936.0], [92.7, 119936.0], [92.8, 119936.0], [92.9, 119936.0], [93.0, 120172.0], [93.1, 120172.0], [93.2, 120172.0], [93.3, 120172.0], [93.4, 120172.0], [93.5, 120172.0], [93.6, 120172.0], [93.7, 120172.0], [93.8, 120172.0], [93.9, 120172.0], [94.0, 120443.0], [94.1, 120443.0], [94.2, 120443.0], [94.3, 120443.0], [94.4, 120443.0], [94.5, 120443.0], [94.6, 120443.0], [94.7, 120443.0], [94.8, 120443.0], [94.9, 120443.0], [95.0, 120541.0], [95.1, 120541.0], [95.2, 120541.0], [95.3, 120541.0], [95.4, 120541.0], [95.5, 120541.0], [95.6, 120541.0], [95.7, 120541.0], [95.8, 120541.0], [95.9, 120541.0], [96.0, 121159.0], [96.1, 121159.0], [96.2, 121159.0], [96.3, 121159.0], [96.4, 121159.0], [96.5, 121159.0], [96.6, 121159.0], [96.7, 121159.0], [96.8, 121159.0], [96.9, 121159.0], [97.0, 121703.0], [97.1, 121703.0], [97.2, 121703.0], [97.3, 121703.0], [97.4, 121703.0], [97.5, 121703.0], [97.6, 121703.0], [97.7, 121703.0], [97.8, 121703.0], [97.9, 121703.0], [98.0, 121709.0], [98.1, 121709.0], [98.2, 121709.0], [98.3, 121709.0], [98.4, 121709.0], [98.5, 121709.0], [98.6, 121709.0], [98.7, 121709.0], [98.8, 121709.0], [98.9, 121709.0], [99.0, 123181.0], [99.1, 123181.0], [99.2, 123181.0], [99.3, 123181.0], [99.4, 123181.0], [99.5, 123181.0], [99.6, 123181.0], [99.7, 123181.0], [99.8, 123181.0], [99.9, 123181.0]], "isOverall": false, "label": "homepage", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 13.0, "series": [{"data": [[82900.0, 3.0], [84300.0, 3.0], [84400.0, 13.0], [84500.0, 9.0], [84600.0, 6.0], [84200.0, 4.0], [84800.0, 7.0], [85000.0, 1.0], [82800.0, 9.0], [82600.0, 2.0], [82500.0, 3.0], [82400.0, 5.0], [82200.0, 2.0], [82100.0, 1.0], [84700.0, 7.0], [84100.0, 2.0], [83900.0, 2.0], [83800.0, 3.0], [83700.0, 5.0], [83400.0, 1.0], [83200.0, 1.0], [83100.0, 1.0], [83000.0, 1.0], [83300.0, 1.0], [83600.0, 4.0], [83500.0, 3.0], [88800.0, 1.0]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[134000.0, 1.0], [144000.0, 1.0], [154800.0, 1.0], [154000.0, 1.0], [156800.0, 1.0], [162000.0, 1.0], [168800.0, 1.0], [169600.0, 1.0], [164800.0, 1.0], [179200.0, 1.0], [175600.0, 1.0], [174000.0, 1.0], [180800.0, 1.0], [181600.0, 1.0], [184800.0, 1.0], [131300.0, 1.0], [131700.0, 1.0], [160500.0, 1.0], [161300.0, 1.0], [162900.0, 1.0], [174900.0, 2.0], [175700.0, 1.0], [178500.0, 1.0], [180100.0, 2.0], [176500.0, 1.0], [178100.0, 1.0], [184500.0, 1.0], [185300.0, 1.0], [184900.0, 1.0], [183300.0, 1.0], [114500.0, 2.0], [114100.0, 1.0], [113900.0, 1.0], [114300.0, 1.0], [116300.0, 1.0], [115500.0, 1.0], [114900.0, 3.0], [116100.0, 1.0], [116700.0, 1.0], [117900.0, 1.0], [118700.0, 2.0], [122100.0, 1.0], [120100.0, 1.0], [125500.0, 1.0], [130700.0, 1.0], [146200.0, 1.0], [140200.0, 1.0], [158200.0, 1.0], [159800.0, 1.0], [165400.0, 1.0], [166200.0, 1.0], [167000.0, 1.0], [167800.0, 1.0], [168600.0, 1.0], [172600.0, 1.0], [177000.0, 1.0], [177800.0, 1.0], [174200.0, 1.0], [179800.0, 1.0], [181800.0, 1.0], [184600.0, 1.0], [183000.0, 1.0], [134700.0, 1.0], [132700.0, 1.0], [151900.0, 1.0], [159100.0, 1.0], [163900.0, 1.0], [164700.0, 1.0], [171100.0, 1.0], [171900.0, 1.0], [173100.0, 1.0], [173900.0, 1.0], [174700.0, 1.0], [173500.0, 1.0], [179900.0, 1.0], [179100.0, 1.0], [177100.0, 2.0], [174300.0, 1.0], [183100.0, 1.0], [183900.0, 2.0], [184700.0, 1.0], [183500.0, 1.0], [113600.0, 2.0], [114400.0, 2.0], [113800.0, 1.0], [117200.0, 1.0], [114800.0, 1.0], [117400.0, 1.0], [118400.0, 1.0], [121400.0, 1.0]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[1100.0, 2.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 2.0], [1600.0, 2.0], [1700.0, 5.0], [1800.0, 4.0], [1900.0, 2.0], [2000.0, 4.0], [2300.0, 1.0], [2200.0, 2.0], [2400.0, 3.0], [2500.0, 1.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 2.0], [3100.0, 1.0], [4300.0, 1.0], [73300.0, 1.0], [79500.0, 1.0], [81100.0, 1.0], [5200.0, 1.0], [82700.0, 1.0], [85500.0, 1.0], [87100.0, 1.0], [5800.0, 1.0], [93900.0, 1.0], [98700.0, 1.0], [98500.0, 1.0], [101100.0, 1.0], [6800.0, 1.0], [111500.0, 1.0], [113100.0, 1.0], [114900.0, 1.0], [116700.0, 1.0], [120100.0, 1.0], [119900.0, 1.0], [120500.0, 1.0], [121100.0, 1.0], [121700.0, 2.0], [123100.0, 1.0], [8200.0, 1.0], [9800.0, 1.0], [10500.0, 1.0], [11500.0, 1.0], [15400.0, 1.0], [19500.0, 1.0], [22400.0, 1.0], [25000.0, 1.0], [25100.0, 1.0], [25300.0, 1.0], [25900.0, 1.0], [26000.0, 1.0], [26600.0, 1.0], [26500.0, 1.0], [26700.0, 3.0], [26900.0, 1.0], [34100.0, 1.0], [44500.0, 1.0], [54700.0, 1.0], [56100.0, 1.0], [65300.0, 1.0], [68400.0, 1.0], [85600.0, 1.0], [105400.0, 1.0], [106400.0, 1.0], [108600.0, 1.0], [110800.0, 1.0], [110600.0, 1.0], [114600.0, 2.0], [118000.0, 2.0], [118400.0, 1.0], [119400.0, 1.0], [119600.0, 1.0], [120400.0, 1.0]], "isOverall": false, "label": "homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 185300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 293.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 293.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.68268914E12, "maxY": 100.0, "series": [{"data": [[1.6826892E12, 100.0], [1.68268938E12, 80.59154929577464], [1.68268926E12, 100.0], [1.68268944E12, 24.0], [1.68268914E12, 100.0], [1.68268932E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68268944E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45628.57999999999, "minX": 1.0, "maxY": 154110.81000000008, "series": [{"data": [[2.0, 82217.0], [3.0, 82214.0], [4.0, 82408.0], [5.0, 82521.0], [6.0, 82486.0], [7.0, 82474.0], [8.0, 82411.0], [9.0, 82479.0], [10.0, 82581.0], [11.0, 82573.0], [12.0, 82640.0], [13.0, 82610.0], [14.0, 82875.0], [15.0, 82872.0], [16.0, 82896.0], [17.0, 82871.0], [18.0, 82808.0], [19.0, 82815.0], [20.0, 82897.0], [21.0, 82876.0], [22.0, 82900.0], [23.0, 82906.0], [24.0, 83039.0], [25.0, 82885.0], [26.0, 82910.0], [27.0, 83184.0], [28.0, 83311.0], [29.0, 83285.0], [30.0, 83582.0], [31.0, 83581.0], [33.0, 83714.0], [32.0, 83601.0], [35.0, 83695.0], [34.0, 83701.0], [37.0, 83582.0], [36.0, 83681.0], [39.0, 83761.0], [38.0, 83693.0], [41.0, 83811.0], [40.0, 83708.0], [43.0, 83454.0], [42.0, 83893.0], [45.0, 83800.0], [44.0, 83788.0], [47.0, 83990.0], [46.0, 83980.0], [49.0, 84383.0], [48.0, 84263.0], [51.0, 84216.0], [50.0, 84177.0], [53.0, 84259.0], [52.0, 84136.0], [55.0, 84405.0], [54.0, 84418.0], [57.0, 84499.0], [56.0, 84384.0], [59.0, 84482.0], [58.0, 84493.0], [61.0, 84596.0], [60.0, 84500.0], [63.0, 84639.0], [62.0, 84627.0], [67.0, 84830.0], [66.0, 84718.0], [65.0, 84724.0], [64.0, 84701.0], [71.0, 84798.0], [70.0, 84804.0], [69.0, 84796.0], [68.0, 84829.0], [75.0, 84594.0], [74.0, 84666.0], [73.0, 84806.0], [72.0, 84807.0], [79.0, 84527.0], [78.0, 84477.0], [77.0, 84508.0], [76.0, 84604.0], [83.0, 85000.0], [82.0, 84795.0], [81.0, 84796.0], [80.0, 84481.0], [87.0, 84580.0], [86.0, 84624.0], [85.0, 84820.0], [84.0, 84895.0], [91.0, 84409.0], [90.0, 84332.0], [89.0, 84291.0], [88.0, 84498.0], [95.0, 84509.0], [94.0, 84516.0], [93.0, 84602.0], [92.0, 84506.0], [99.0, 84499.0], [98.0, 84440.0], [97.0, 84403.0], [96.0, 84491.0], [100.0, 88898.0], [1.0, 82131.0]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[50.5, 83921.40999999999]], "isOverall": false, "label": "propertyfeed-Aggregated", "isController": false}, {"data": [[100.0, 154110.81000000008]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[100.0, 154110.81000000008]], "isOverall": false, "label": "incidentfeed-Aggregated", "isController": false}, {"data": [[100.0, 45628.57999999999]], "isOverall": false, "label": "homepage", "isController": false}, {"data": [[100.0, 45628.57999999999]], "isOverall": false, "label": "homepage-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 38.666666666666664, "minX": 1.68268914E12, "maxY": 219486.06666666668, "series": [{"data": [[1.6826892E12, 972.8], [1.68268938E12, 219486.06666666668], [1.68268926E12, 31739.166666666668], [1.68268944E12, 146226.26666666666], [1.68268914E12, 3708.8], [1.68268932E12, 215337.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6826892E12, 38.666666666666664], [1.68268938E12, 186.96666666666667], [1.68268926E12, 84.55], [1.68268944E12, 123.76666666666667], [1.68268914E12, 147.41666666666666], [1.68268932E12, 186.96666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68268944E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9187.311475409835, "minX": 1.68268914E12, "maxY": 162927.84507042254, "series": [{"data": [[1.68268938E12, 84642.47169811321], [1.68268944E12, 83108.29787234044]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[1.68268938E12, 115631.44444444444], [1.68268926E12, 160167.0909090909], [1.68268932E12, 162927.84507042254]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[1.6826892E12, 82356.4375], [1.68268926E12, 116727.34782608696], [1.68268914E12, 9187.311475409835]], "isOverall": false, "label": "homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68268944E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9186.475409836068, "minX": 1.68268914E12, "maxY": 162644.42253521128, "series": [{"data": [[1.68268938E12, 84350.96226415093], [1.68268944E12, 82818.70212765956]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[1.68268938E12, 115341.05555555556], [1.68268926E12, 159914.00000000003], [1.68268932E12, 162644.42253521128]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[1.6826892E12, 82355.9375], [1.68268926E12, 116726.86956521738], [1.68268914E12, 9186.475409836068]], "isOverall": false, "label": "homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68268944E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68268914E12, "maxY": 564.8125, "series": [{"data": [[1.68268938E12, 71.56603773584905], [1.68268944E12, 68.04255319148938]], "isOverall": false, "label": "propertyfeed", "isController": false}, {"data": [[1.68268938E12, 86.61111111111111], [1.68268926E12, 0.0], [1.68268932E12, 17.408450704225352]], "isOverall": false, "label": "incidentfeed", "isController": false}, {"data": [[1.6826892E12, 564.8125], [1.68268926E12, 475.2608695652174], [1.68268914E12, 532.9180327868851]], "isOverall": false, "label": "homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68268944E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1103.0, "minX": 1.68268914E12, "maxY": 185389.0, "series": [{"data": [[1.6826892E12, 105471.0], [1.68268938E12, 118779.0], [1.68268926E12, 164783.0], [1.68268944E12, 83990.0], [1.68268914E12, 44538.0], [1.68268932E12, 185389.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6826892E12, 102454.0], [1.68268938E12, 115944.0], [1.68268926E12, 162629.0], [1.68268944E12, 83802.2], [1.68268914E12, 26696.0], [1.68268932E12, 183982.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6826892E12, 105471.0], [1.68268938E12, 118779.0], [1.68268926E12, 164783.0], [1.68268944E12, 83990.0], [1.68268914E12, 44538.0], [1.68268932E12, 185389.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6826892E12, 105471.0], [1.68268938E12, 118177.8], [1.68268926E12, 164167.0], [1.68268944E12, 83945.2], [1.68268914E12, 26940.2], [1.68268932E12, 184785.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6826892E12, 54761.0], [1.68268938E12, 84136.0], [1.68268926E12, 106463.0], [1.68268944E12, 82131.0], [1.68268914E12, 1103.0], [1.68268932E12, 114509.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6826892E12, 84154.5], [1.68268938E12, 84639.0], [1.68268926E12, 120172.0], [1.68268944E12, 82906.0], [1.68268914E12, 2437.0], [1.68268932E12, 174092.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68268944E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1593.0, "minX": 1.0, "maxY": 151997.0, "series": [{"data": [[1.0, 84947.5], [2.0, 98125.0], [4.0, 120054.0], [10.0, 1593.0], [3.0, 73221.5], [26.0, 2093.0], [7.0, 26616.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 151997.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1593.0, "minX": 1.0, "maxY": 151997.0, "series": [{"data": [[1.0, 84653.0], [2.0, 98124.0], [4.0, 120053.5], [10.0, 1593.0], [3.0, 73221.0], [26.0, 2093.0], [7.0, 26616.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 151997.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.68268914E12, "maxY": 2.683333333333333, "series": [{"data": [[1.6826892E12, 0.26666666666666666], [1.68268938E12, 0.3], [1.68268926E12, 0.5666666666666667], [1.68268914E12, 2.683333333333333], [1.68268932E12, 1.1833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68268938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68268914E12, "maxY": 1.1833333333333333, "series": [{"data": [[1.6826892E12, 0.26666666666666666], [1.68268938E12, 1.1833333333333333], [1.68268926E12, 0.55], [1.68268944E12, 0.7833333333333333], [1.68268914E12, 1.0166666666666666], [1.68268932E12, 1.1833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68268926E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68268944E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68268914E12, "maxY": 1.1833333333333333, "series": [{"data": [[1.68268926E12, 0.016666666666666666]], "isOverall": false, "label": "incidentfeed-failure", "isController": false}, {"data": [[1.68268938E12, 0.3], [1.68268926E12, 0.16666666666666666], [1.68268932E12, 1.1833333333333333]], "isOverall": false, "label": "incidentfeed-success", "isController": false}, {"data": [[1.6826892E12, 0.26666666666666666], [1.68268926E12, 0.38333333333333336], [1.68268914E12, 1.0166666666666666]], "isOverall": false, "label": "homepage-success", "isController": false}, {"data": [[1.68268938E12, 0.8833333333333333], [1.68268944E12, 0.7833333333333333]], "isOverall": false, "label": "propertyfeed-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68268944E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68268914E12, "maxY": 1.1833333333333333, "series": [{"data": [[1.6826892E12, 0.26666666666666666], [1.68268938E12, 1.1833333333333333], [1.68268926E12, 0.55], [1.68268944E12, 0.7833333333333333], [1.68268914E12, 1.0166666666666666], [1.68268932E12, 1.1833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68268926E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68268944E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

